

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error


df = pd.read_csv(r'C:/Users/HP PC/Desktop/advert/advertising.csv')


print("\n First Ten Rows:\n", df.head(10) )

print ("\n Dataset Info:\n", df.info())

print ("\n Statistics:\n", df.describe())

print ("\n Missing values sum:\n", df.isnull().sum())


# Create a figure with GridSpec
fig = plt.figure(figsize=(20, 15))
grid = plt.GridSpec(3, 2, hspace=0.5, wspace=0.4)

# TV vs Sales scatterplot
ax1 = fig.add_subplot(grid[0, 0])
sns.scatterplot(x='TV', y='Sales', data=df, ax=ax1)
ax1.set_title('TV vs Sales')
ax1.set_xlabel('TV Budget')
ax1.set_ylabel('Sales')

# Radio vs Sales scatterplot
ax2 = fig.add_subplot(grid[0, 1])
sns.scatterplot(x='Radio', y='Sales', data=df, ax=ax2)
ax2.set_title('Radio vs Sales')
ax2.set_xlabel('Radio Budget')
ax2.set_ylabel('Sales')

# Newspaper vs Sales scatterplot
ax3 = fig.add_subplot(grid[1, 0])
sns.scatterplot(x='Newspaper', y='Sales', data=df, ax=ax3)
ax3.set_title('Newspaper vs Sales')
ax3.set_xlabel('Newspaper Budget')
ax3.set_ylabel('Sales')


"""
# Distribution of Sales
ax4 = fig.add_subplot(grid[1, 1])
sns.histplot(df['Sales'], kde=True, ax=ax4)
ax4.set_title('Distribution of Sales')
ax4.set_xlabel('Sales')
ax4.set_ylabel('Frequency')
"""

"""
# Correlation Matrix
ax5 = fig.add_subplot(grid[2, :])
corr = df.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax5)
ax5.set_title('Correlation Matrix')
"""
# Display the plot
plt.show()



#Features And Target Variable


X= df[['TV', 'Radio', 'Newspaper']] #Features

y= df['Sales']


#Splitting The Data into training and testing sets


X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.2, random_state= 42)


model= LinearRegression()

#Training the model

model.fit(X_train, y_train)

y_pred= model.predict(X_test)

#Evaluate my model

mae= mean_absolute_error(y_test, y_pred)
mse= mean_squared_error(y_test, y_pred)
r2= r2_score(y_test, y_pred)



print(f"Mean Absolute Error:{mae:.2f}")
print(f"Mean Squared Error:{mse:.2f}")
print(f"R-squared Score:{r2:.2f}")


#Analyzing the result on a plot

plt. figure(figsize=(10, 6))
plt. scatter(y_test, y_pred)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', lw=2)
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.show()




#Scatter Plots between TV advertising and sales

"""
sns.scatterplot(x='TV', y='Sales', data=df)
plt.title('TV Advertising vs Sales')
plt.show()



sns.scatterplot(x='Radio', y='Sales', data=df)
plt.title('Radio Advertising vs Sales')
plt.show()



sns.scatterplot(x='Newspaper', y='Sales', data=df)
plt.title('Newspaper Advertising vs Sales')
plt.show()
"""

#Distribution Of Sales

sns.histplot(df['Sales'], kde=True)
plt.title('Distribution Of Sales')
plt.show()


#Correlation Matrix

corr_matrix=df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='viridis')
plt.title('Correlation Matrix')
plt.show()






"""
#Creating a figure with multiple subplots

fig, axes= plt.subplots(2, 2, figsize=(15, 10))


#Scatter PLot

axes[0, 0]. scatter(df['TV'], df['Sales'])
axes[0, 0].set_title('TV vs Sales')
axes[0, 0]. set_xlabel('TV Budget')
axes[0, 0].set_ylabel ('Sales')


axes[0, 0]. scatter(df['Radio'], df['Sales'])
axes[0, 0].set_title('Radio vs Sales')
axes[0, 0]. set_xlabel('Radio Budget')
axes[0, 0].set_ylabel ('Sales')


axes[0, 0]. scatter(df['Newspaper'], df['Sales'])
axes[0, 0].set_title('Newspaper vs Sales')
axes[0, 0]. set_xlabel('Newspaper Budget')
axes[0, 0].set_ylabel ('Sales')


#Distribution Plot For Sales


sns.histplot(df['Sales'], kde=True, ax=axes[0, 1])
axes[0, 1].set_title('Distribution Of Sales')


#Correlation Matrix
corr=df.corr()

sns.heatmap(corr, annot=True, cmap='coolwarm', ax=axes[1, 0])
axes[1, 0].set_title('Correlation Matrix')


#Adjust Layout
plt.tight_layout()
plt.show()
"""


input()
